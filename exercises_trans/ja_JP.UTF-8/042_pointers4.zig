//
// では、ポインターを使用して、これまでできなかったことを行ってみましょう。
// 関数に値を参照渡ししましょう。
//
// なぜ整数型変数へのポインタを渡したいのでしょう？
// なぜ整数値そのものではなく、整数型変数へのポインタを渡したいのでしょうか？なぜなら、そうすれば
// 変数の値を *変更* することができるからです!
//
// +-----------------------------------------------+
// | 指された値を変更したい場合は、参照渡しとする。        |
// | それ以外の場合は、値を渡す。                       |
// +-----------------------------------------------+

const std = @import("std");

pub fn main() void {
    var num: u8 = 1;
    var more_nums = [_]u8{ 1, 1, 1, 1 };

    // numの参照を関数に渡し、それを表示してみましょう。
    makeFive(&num);
    std.debug.print("num: {}, ", .{num});

    // さて、面白いことがあります。特定の配列の値への
    // 参照を渡してみましょう。
    makeFive(&more_nums[2]);

    // そして、その配列を出力する。
    std.debug.print("more_nums: ", .{});
    for (more_nums) |n| {
        std.debug.print("{} ", .{n});
    }

    std.debug.print("\n", .{});
}

// この関数は、u8 値への参照を取り、それを 5 に設定する必要があります。
// 
fn makeFive(x: *u8) void {
    ??? = 5; // fix me!
}
