//
// enum型は実際には単なる数値の集合です。番号付けはコンパイラに
// 任せることができますし、明示的に割り当てることもできます。
// 使用する数値型も指定できます。
//
//     const Stuff = enum(u8){ foo = 16 };
//
// 組み込み関数@enumToInt()で整数を取り出すことができます。
// 組み込み関数については、後日の練習問題です。
// 
//
//     var my_stuff: u8 = @enumToInt(Stuff.foo);
//
// 組み込み関数は、私たちが使っている
// @import() 関数のように "@" で始まることに注意してください。
//
const std = @import("std");

// Zigでは16進数で整数を書くことができます。
//
//     0xf (16進数で15)
//
// ウェブブラウザでは、16進数で色を指定することができます。
// 各バイトが赤、緑、青の成分の明るさを表す。
// 16進数で、各バイトが赤、緑、青成分（RGB）の明るさを表します。
// 2桁が1バイトで、値の範囲は0〜255です。
//
//     #RRGGBB
//
// Colorに純粋な青の値を定義して使用してください:
const Color = enum(u32) {
    red = 0xff0000,
    green = 0x00ff00,
    blue = ???,
};

pub fn main() void {
    // Zigの複数行文字列を覚えていますか？またまた登場です。
    // また、このクールなフォーマット文字列も見てみましょう。
    //
    //     {x:0>6}
    //      ^
    //      x       タイプ ('x' は小文字の 16 進数)
    //       :      セパレータ (フォーマット構文に必要)
    //        0     パディング文字 (デフォルトは ' ')
    //         >    アラインメント（'>'で右寄せになります。）
    //          6   幅 (パディングを使用すると強制的に幅が狭くなる)
    //
    // このフォーマットを青い値に追加してください。
    // (さらに良いのは、これなしで実験するか、これの一部を試すことです。
    // 何が印刷されるか見てみましょう！)
    std.debug.print(
        \\<p>
        \\  <span style="color: #{x:0>6}">Red</span>
        \\  <span style="color: #{x:0>6}">Green</span>
        \\  <span style="color: #{}">Blue</span>
        \\</p>
        \\
    , .{
        @enumToInt(Color.red),
        @enumToInt(Color.green),
        @enumToInt(???), // おっと! 何か見逃してる！
    });
}
