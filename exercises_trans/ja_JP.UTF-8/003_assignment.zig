//
// 何でもかんでも「const u8」にしてしまうのは、ちょっと調子に乗りすぎ！
//
// "const" 値は変更できない。
// "u" 型は "unsigned" で、負の値を格納することはできない。
// "8 "は型が8ビットであることを意味する。
//
// 例: fooは変更できない（CONSTantである）。
// barは変更可能（VARiableである）。
//
//     const foo: u8 = 20;
//     var bar: u8 = 20;
//
// 例: foo は負の値をとることができず、0 から 255 までを保持することができる。
// bar は負の値をとることができ、-128 から 127 まで保持できる。
//
//     const foo: u8 = 20;
//     const bar: i8 = -20;
//
// 例: foo は 8 ビット (0 から 255) を保持できます。
// bar は 16 ビット（0～65,535）。
//
//     const foo: u8 = 20;
//     const bar: u16 = 2000;
//
// これらの組み合わせは、思いつく限り何でもできる。
//
// u32 は 0 から 4,294,967,295 までを格納できる。
// i64 は -9,223,372,036,854,775,808 から 9,223,372,036,854,775,807 を保持することができる。
//
// 型が望ましい値を保持できるように
// そして、エラーがなくなるようにこのプログラムを修正してください
//
const std = @import("std");

pub fn main() void {
    const n: u8 = 50;
    n = n + 5;

    const pi: u8 = 314159;

    const negative_eleven: u8 = -11;

    // 次の行にはエラーはありませんが、説明をさせてください
    // print 関数が 2つのパラメータを受け取ることに気づいていますか？
    // これを理解できるように説明しますね。
    // 最初のパラメータは文字列です。この文字列にはプレースホルダー '{}' を含めることができ、
    // 第２パラメータは「無名リストリテラル」で表示するべき情報を持っています
    // (今は気にしないでください)
    std.debug.print("{} {} {}\n", .{ n, pi, negative_eleven });
}
