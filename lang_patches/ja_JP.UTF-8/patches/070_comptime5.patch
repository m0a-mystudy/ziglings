2,4c2,4
< // Being able to pass types to functions at compile time lets us
< // generate code that works with multiple types. But it doesn't
< // help us pass VALUES of different types to a function.
---
> // コンパイル時に関数に型を渡すことができるため、
> // 複数の型で動作するコードを生成することができます。
> // しかし、異なる型の値を関数に渡す助けにはなりません。
6,7c6,7
< // For that, we have the 'anytype' placeholder, which tells Zig
< // to infer the actual type of a parameter at compile time.
---
> // このため、'anytype' プレースホルダーを用意しています。
> // これは、コンパイル時にパラメータの実際の型を推測するように Zig に指示します。
11,14c11,14
< // Then we can use builtins such as @TypeOf(), @typeInfo(),
< // @typeName(), @hasDecl(), and @hasField() to determine more
< // about the type that has been passed in. All of this logic will
< // be performed entirely at compile time.
---
> // そして、@TypeOf()、@typeInfo()、@typeName()、
> // @hasDecl()、@hasField()などの組み込み関数を使って、
> // 渡された型についてさらに詳しく調べることができるようになるのです。
> // このロジックは、すべてコンパイル時に実行されます。
18,20c18,20
< // Let's define three structs: Duck, RubberDuck, and Duct. Notice
< // that Duck and RubberDuck both contain waddle() and quack()
< // methods declared in their namespace (also known as "decls").
---
> // 3つの構造体を定義してみましょう。Duck、RubberDuck、Duct
> // DuckとRubberDuckは、名前空間で宣言されたwaddle()とquack()メソッドを含んでいることに
> // 注意してください（「decl」とも呼ばれます
53,54c53,54
<         // Assigning an expression to '_' allows us to safely
<         // "use" the value while also ignoring it.
---
>         // 式を'_'に代入することで、安全に
>         // 値を「利用」しつつ、無視することができる。
60,61c60,61
<         // Listen to developer talk about programming problem.
<         // Silently contemplate problem. Emit helpful sound.
---
>         // プログラミングの問題について開発者の話を聞く。
>         // 黙々と問題を考える。役に立つ音を出す。
85c85
<     // This is a real duck!
---
>     // これは本物のアヒルです!
91,92c91,92
<     // This is not a real duck, but it has quack() and waddle()
<     // abilities, so it's still a "duck".
---
>     // これは本物のアヒルではないが、
>     // quack()とwaddle()の能力を持っているので、やはり "アヒル "である。
97c97
<     // This is not even remotely a duck.
---
>     // これはアヒルとは言えない。
109,113c109,112
< // This function has a single parameter which is inferred at
< // compile time. It uses builtins @TypeOf() and @hasDecl() to
< // perform duck typing ("if it walks like a duck and it quacks
< // like a duck, then it must be a duck") to determine if the type
< // is a "duck".
---
> // この関数は、コンパイル時に推論される単一のパラメータを持ちます。
> // 組み込み関数 @TypeOf() と @hasDecl() を使ってアヒルの型付け
> // （「アヒルのように歩き、アヒルのように鳴くなら、それはアヒルに違いない」）
> // を行い、その型が「アヒル」であるかどうかを判断しています。
115,116c114,115
<     // We'll use @hasDecl() to determine if the type has
<     // everything needed to be a "duck".
---
>     //  @hasDecl()を使って、
>     // その型が「アヒル」に必要なものをすべて持っているかどうかを判断します。
118,119c117,118
<     // In this example, 'has_increment' will be true if type Foo
<     // has an increment() method:
---
>     // この例では、Foo型がincrement()メソッドを持つ場合、
>     // 'has_increment'はtrueになります。
123,124c122,123
<     // Please make sure MyType has both waddle() and quack()
<     // methods:
---
>     // MyType が waddle() と quack() の両方のメソッドを持っていることを
>     // 確認してください。
132,134c131,139
<         // We also call the quack() method here to prove that Zig
<         // allows us to perform duck actions on anything
<         // sufficiently duck-like.
---
>         // ここで quack() メソッドを呼んで、Zig が十分にアヒルっぽいものに対して
>         // アヒルアクションを実行できることを証明する。
>         //
>         //
>         // チェックと推論はすべてコンパイル時に行われるため、
>         // 完全な型安全性が保たれている。
>         // quack()メソッドを持たない構造体（Ductなど）に対して
>         // quack()メソッドを呼び出そうとすると、コンパイルエラーとなり、
>         // 実行時のパニックやクラッシュは発生しません。
136,140d140
<         // Because all of the checking and inference is performed
<         // at compile time, we still have complete type safety:
<         // attempting to call the quack() method on a struct that
<         // doesn't have it (like Duct) would result in a compile
<         // error, not a runtime panic or crash!
