2c2
< // You can also make pointers to multiple items without using a slice.
---
> // スライスを使用せずに、複数のアイテムへのポインタを作成することもできます。
8,10c8,10
< // The difference between foo_slice and foo_ptr is that the slice has
< // a known length. The pointer doesn't. It is up to YOU to keep track
< // of the number of u8s foo_ptr points to!
---
> // foo_slice と foo_ptr の違いは、スライスの長さが既知であることです。
> // ポインターは長さをわかっていません
> // foo_ptr が指し示す u8 の個数を追跡するのはあなた自身となります。
15,17c15,17
<     // Take a good look at the array type to which we're coercing
<     // the zen12 string (the REAL nature of strings will be
<     // revealed when we've learned some additional features):
---
>     // zen12 の文字列を強制する配列の型をよく見てください 
>     // (文字列の本当の性質は、いくつかの追加機能を学習したときに明らかになります)。
>     // 
20c20
<     //   It would also have been valid to coerce to a slice:
---
>     //   スライスに強制することも有効です。:
23c23
<     // Now let's turn this into a "many-item pointer":
---
>     // ここで、これを「多項目ポインタ(many-item pointer)」にしてみましょう。:
26,27c26,27
<     // It's okay to access zen_manyptr just like an array or slice as
<     // long as you keep track of the length yourself!
---
>     // 配列やスライスと同様に、zen_manyptr にアクセスしてもかまいません。
>     // 長さを自分で管理していれば大丈夫です!
29,32c29,32
<     // A "string" in Zig is a pointer to an array of const u8 values
<     // (or a slice of const u8 values, as we saw above). So, we could
<     // treat a "many-item pointer" of const u8 as a string as long as
<     // we can CONVERT IT TO A SLICE. (Hint: we do know the length!)
---
>     // Zig における「文字列」は、const u8 値の配列へのポインタです
>     // （上で見たように、const u8 値のスライスでもかまいません）。
>     // つまり、const u8 の「多項目ポインタ」は、それをスライスに変換することができれば、
>     // 文字列として扱うことができます。(ヒント: 長さはわかっている!)
34c34
<     // Please fix this line so the print statement below can print it:
---
>     // この行を修正して、下の print 文がこれを出力できるようにしてください。
37c37
<     // Here's the moment of truth!
---
>     // ここからが正念場!
41c41
< // Are all of these pointer types starting to get confusing?
---
> // ポインタの型がたくさんあって、混乱してきましたか？
43c43
< //     FREE ZIG POINTER CHEATSHEET! (Using u8 as the example type.)
---
> //     無料の ZIG POINTER チートシート (u8をサンプル型として使用)
45,53c45,53
< //   |  u8           |  one u8                                      |
< //   |  *u8          |  pointer to one u8                           |
< //   |  [2]u8        |  two u8s                                     |
< //   |  [*]u8        |  pointer to unknown number of u8s            |
< //   |  [*]const u8  |  pointer to unknown number of immutable u8s  |
< //   |  *[2]u8       |  pointer to an array of 2 u8s                |
< //   |  *const [2]u8 |  pointer to an immutable array of 2 u8s      |
< //   |  []u8         |  slice of u8s                                |
< //   |  []const u8   |  slice of immutable u8s                      |
---
> //   |  u8           |  1つのu8                                      |
> //   |  *u8          |  1つのu8へのポインタ                            | 
> //   |  [2]u8        |  u8を2つ                                      |
> //   |  [*]u8        |  未知個数の u8 のポインタ                        |
> //   |  [*]const u8  |  不変の u8 の未知個数のポインタ                   |
> //   |  *[2]u8       |  2個のu8からなる配列へのポインタ                  |
> //   |  *const [2]u8 |  2個のu8からなる不変の配列へのポインタ             |
> //   |  []u8         |  u8のスライス                                  |
> //   |  []const u8   |  不変の u8 のスライス                           |
