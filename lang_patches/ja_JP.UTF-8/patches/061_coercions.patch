2,3c2,3
< // It'll only take us a moment to learn the Zig type coercion
< // rules because they're quite logical.
---
> // Zig型の強制適用を学ぶには、ほんの少し時間がかかります。
> // ルールは非常に論理的だからです。
5c5
< // 1. Types can always be made _more_ restrictive.
---
> // 1. 型は常に「より」制限的にすることができる。
9c9
< //    var p2: *const u8 = p1; // mutable to immutable
---
> //    var p2: *const u8 = p1; // ミュータブルからイミュータブルへ
11c11
< // 2. Numeric types can coerce to _larger_ types.
---
> // 2. 数値型はより「大きな」型に変換することができる
19,20c19,20
< // 3. Single-item pointers to arrays coerce to slices and
< //    many-item pointers.
---
> // 3. 配列への単一項目ポインタは、スライスと多項目ポインタに変換される。
> // 
26,27c26,27
< // 4. Single-item mutable pointers can coerce to single-item
< //    pointers pointing to an array of length 1. (Interesting!)
---
> // 4. 単項目ポインタは、長さ1の配列を指す単項目ポインタに変換することができます。
> // 
32c32
< // 5. Payload types and null coerce to optionals.
---
> // 5. ペイロード型と NULL強制をオプショナルに 
38c38
< // 6. Payload types and errors coerce to error unions.
---
> // 6. ペイロード型とエラーは、エラーユニオンに強制される。
45c45
< // 7. 'undefined' coerces to any type (or it wouldn't work!)
---
> // 7. 'undefined' は任意の型に強制される (そうでなければ動作しない!)。
47c47
< // 8. Compile-time numbers coerce to compatible types.
---
> // 8. コンパイル時の数値は互換性のある型に強制される。
49,51c49,51
< //    Just about every single exercise program has had an example
< //    of this, but a full and proper explanation is coming your
< //    way soon in the third-eye-opening subject of comptime.
---
> // しかし、完全で適切な説明は、
> // 第三の目を開くテーマである comptime で近々行われる予定です。
> // 
53c53
< // 9. Tagged unions coerce to the current tagged enum.
---
> // 9. タグ付きユニオンは、現在のタグ付き列挙型を強制する 
55,56c55,56
< // 10. Enums coerce to a tagged union when that tagged field is a
< //     zero-length type that has only one value (like void).
---
> // 10. 列挙型は、タグ付きフィールドが (void のような) 値を 1 つだけ持つ長さゼロの型である場合、
> // 　　列挙型はタグ付きユニオンになる。
58,59c58,59
< // 11. Zero-bit types (like void) can be coerced into single-item
< //     pointers.
---
> // 11. ゼロビット型（voidなど）は1項目ポインタに強制することができる。
> // 
61,63c61,63
< // The last three are fairly esoteric, but you're more than
< // welcome to read more about them in the official Zig language
< // documentation and write your own experiments.
---
> // 最後の3つはかなり難解ですが、詳しくはZig言語の公式ドキュメントを読んで、
> // 自分で実験してみるといいでしょう。
> // 
72,74c72,74
<     //           Your type here.
<     // Must coerce from &letter (which is a *u8).
<     // Hint: Use coercion Rules 4 and 5.
---
>     //        ここにあなたの型があります。
>     // &letter (これは *u8) から強制されなければなりません。
>     // ヒント：強制ルール4と5を使用する。
76c76
<     // When it's right, this will work:
---
>     // 正解の場合、これは動作します。
