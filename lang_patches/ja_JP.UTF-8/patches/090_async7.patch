2,4c2,4
< // Remember how a function with 'suspend' is async and calling an
< // async function without the 'async' keyword makes the CALLING
< // function async?
---
> // 'suspend' を持つ関数は非同期で、'async' キーワードなしで非同期関数を呼び出すと
> // 呼び出し元の関数が非同期になることを思い出してください。
> // 
14,15c14,15
< // But if you KNOW the function won't suspend, you can make a
< // promise to the compiler with the 'nosuspend' keyword:
---
> // しかし、関数がサスペンドしないことが分かっている場合、 
> // 'nosuspend' キーワードでコンパイラに約束させることができます。
21,23c21,23
< // If the function does suspend and YOUR PROMISE TO THE COMPILER
< // IS BROKEN, the program will panic at runtime, which is
< // probably better than you deserve, you oathbreaker! >:-(
---
> // もし関数がサスペンドしてコンパイラとの約束が破られた場合、
> // プログラムは実行時にパニックを起こします。
> // この誓い破りめ! >:-(
29,31c29,31
<     // The main() function can not be async. But we know
<     // getBeef() will not suspend with this particular
<     // invocation. Please make this okay:
---
>     // main()関数は非同期ではありえない。しかし、我々はgetBeef()が
>     // この特定の呼び出しで中断されないことを知っています。
>     // これをOKにしてください。
45c45
< // Going Deeper Into...
---
> // もっと深く...
48,65c48,65
< // We haven't discussed it yet, but runtime "safety" features
< // require some extra instructions in your compiled program.
< // Most of the time, you're going to want to keep these in.
< //
< // But in some programs, when data integrity is less important
< // than raw speed (some games, for example), you can compile
< // without these safety features.
< //
< // Instead of a safe panic when something goes wrong, your
< // program will now exhibit Undefined Behavior (UB), which simply
< // means that the Zig language does not (cannot) define what will
< // happen. The best case is that it will crash, but in the worst
< // case, it will continue to run with the wrong results and
< // corrupt your data or expose you to security risks.
< //
< // This program is a great way to explore UB. Once you get it
< // working, try calling the getBeef() function with the value
< // 0xDEAD so that it will invoke the 'suspend' keyword:
---
> // まだ説明していませんでしたが、ランタイムの「安全性」機能には、
> // コンパイルされたプログラムにいくつかの余分な命令が必要です。
> // たいていの場合、これらを入れておくとよいでしょう。
> //
> // しかし、プログラムによっては、データの整合性が処理速度よりも重要でない場合
> // （例えば、いくつかのゲーム）、これらの安全機能なしでコンパイルすることができます。
> // 
> //
> // これは単に Zig言語が 何が起こるかを定義していない つまりUndefined Behavior (UB)
> // であることを意味します。
> // 最良のケースはクラッシュすることですが、最悪のケースでは、
> // 間違った結果で実行し続け、データを破損したり、
> // セキュリティリスクにさらされたりすることになります。
> // 
> //
> // このプログラムは UB を探求するのに最適な方法です。
> // 動作するようになったら、getBeef()関数を値0xDEADで呼び出して、
> // 「suspend」キーワードを呼び出すようにしてみてください。
69,70c69,70
< // Now when you run the program, it will panic and give you a
< // nice stack trace to help debug the problem.
---
> // このプログラムを実行すると、パニックが発生し、
> // 問題のデバッグに役立つスタックトレースが表示されます。
76,77c76,77
< // But see what happens when you turn off safety checks by using
< // ReleaseFast mode:
---
> // しかし、ReleaseFastモードを使用して安全チェックをオフにすると
> // どうなるかを見てみましょう。
82,86c82,86
< // This is the wrong result. On your computer, you may get a
< // different answer or it might crash! What exactly will happen
< // is UNDEFINED. Your computer is now like a wild animal,
< // reacting to bits and bytes of raw memory with the base
< // instincts of the CPU. It is both terrifying and exhilarating.
---
> // これは間違った結果です。あなたのコンピュータでは、違う答えが
> // 返ってくるかもしれませんし、クラッシュするかもしれません! 
> // 具体的に何が起こるかは未定です。あなたのコンピュータは今、
> // 野生動物のように、CPUの基本的な本能で生のメモリの
> // ビットとバイトに反応しています。それは恐ろしくもあり、爽快でもあります。
