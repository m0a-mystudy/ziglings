6c6
< // Are you ready for the THE TRUTH about Zig string literals?
---
> // Zig文字列リテラルについてのTHE TRUTHの準備はできたか？
8c8
< // Here it is:
---
> //ここにあります。
12,13c12,13
< // Which means a string literal is a "constant pointer to a
< // zero-terminated (null-terminated) fixed-size array of u8".
---
> // つまり、文字列リテラルは
> // 「u8のゼロ終端（ヌル終端）固定サイズ配列への定数ポインタ」である。
15c15
< // Now you know. You've earned it. Welcome to the secret club!
---
> // これでわかっただろう。あなたはそれを獲得したのです。秘密クラブへようこそ!
19,20c19,20
< // Why do we bother using a zero/null sentinel to terminate
< // strings in Zig when we already have a known length?
---
> // すでに長さがわかっているのに、なぜわざわざ Zig で文字列を終了するために
> // ゼロ/ヌルセンチネルを使うのでしょうか？
22,24c22,24
< // Versatility! Zig strings are compatible with C strings (which
< // are null-terminated) AND can be coerced to a variety of other
< // Zig types:
---
> // 汎用性があるからです! Zigの文字列は、C言語の文字列（ヌル終端）と互換性があり、
> // また、他の様々な文字列に強制変換することができます。
> // Zig型に強制することができます。
33,35c33,35
< // All but 'f' may be printed. (A many-item pointer without a
< // sentinel is not safe to print because we don't know where it
< // ends!)
---
> // 'f' 以外は表示してもよい。
> // (センチネルのない多項目ポインタは、どこで終わるか分からないので、印刷しても安全ではありません!)
> //
45c45,49
<     // WeirdContainer is an awkward way to house a string.
---
>     // WeirdContainer は文字列を格納するための厄介な方法です。
>     //
>     // 多項目ポインタ（センチネル終端なし）であるため、
>     // 'data' フィールドは長さ情報と文字列リテラルのセンチネル終端を「失う」
>     //  "Weird Data!
47,49c51
<     // Being a many-item pointer (with no sentinel termination),
<     // the 'data' field "loses" the length information AND the
<     // sentinel termination of the string literal "Weird Data!".
---
>     // 幸運にも、'length' フィールドによってこの値をまだ扱うことが可能です。
51,52d52
<     // Luckily, the 'length' field makes it possible to still
<     // work with this value.
58,60c58,60
<     // How do we get a printable value from 'foo'? One way is to
<     // turn it into something with a known length. We do have a
<     // length... You've actually solved this problem before!
---
>     // どのようにして 'foo' から印字可能な値を得るのでしょうか？一つの方法は、
>     // 長さがわかっているものに変えることです。
>     // 実際に 長さ... 実はこの問題、前に解決したことがあるんです!
62c62
<     // Here's a big hint: do you remember how to take a slice?
---
>     // ここで大きなヒントがあります：スライスの取り方を覚えていますか？
