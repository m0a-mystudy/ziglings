2,3c2,3
< // One of the more common uses of 'comptime' function parameters is
< // passing a type to a function:
---
> // 'comptime'関数パラメータのより一般的な使用法の一つは、
> // 関数に型を渡すことである。
7,8c7,11
< // In fact, types are ONLY available at compile time, so the
< // 'comptime' keyword is required here.
---
> // 実際には、型はコンパイル時にのみ利用可能であるため、
> // ここでは 'comptime' キーワードが必要である。
> //
> // 用意された魔法使いの帽子をかぶる時間をとってください。
> // これからこの能力を使って、ジェネリック関数を実装します。
10,12d12
< // Please take a moment to put on the wizard hat which has been
< // provided for you. We're about to use this ability to implement
< // a generic function.
17,21c17,21
<     // Here we declare arrays of three different types and sizes
<     // at compile time from a function call. Neat!
<     const s1 = makeSequence(u8, 3);  // creates a [3]u8
<     const s2 = makeSequence(u32, 5); // creates a [5]u32
<     const s3 = makeSequence(i64, 7); // creates a [7]i64
---
>     // ここでは，コンパイル時に関数呼び出しから3種類の型とサイズの配列を宣言しています。
>     // すっきりしましたね。
>     const s1 = makeSequence(u8, 3);     // [3]u8 を生成します。
>     const s2 = makeSequence(u32, 5);    // [5]u32を生成します。
>     const s3 = makeSequence(i64, 7);    // [7]i64を生成します。
26,43c26,42
< // This function is pretty wild because it executes at runtime
< // and is part of the final compiled program. The function is
< // compiled with unchanging data sizes and types.
< //
< // And yet it ALSO allows for different sizes and types. This
< // seems paradoxical. How could both things be true?
< //
< // To accomplish this, the Zig compiler actually generates a
< // separate copy of the function for every size/type combination!
< // So in this case, three different functions will be generated
< // for you, each with machine code that handles that specific
< // data size and type.
< //
< // Please fix this function so that the 'size' parameter:
< //
< //     1) Is guaranteed to be known at compile time.
< //     2) Sets the size of the array of type T (which is the
< //        sequence we're creating and returning).
---
> // この関数は実行時に実行され、最終的にコンパイルされたプログラムの一部となるため、
> // かなりワイルドです。
> // この関数はデータのサイズと型が変化しない状態でコンパイルされます。
> //
> // さらに、異なるサイズと型も許容します。これは
> // 逆説的な気がします。どうして両方が真になるのでしょうか？
> //
> // Zig コンパイラはこれを実現するために、サイズと型の組み合わせごとに関数の別コピーを生成しています。
> // この場合、3つの異なる関数が生成され、それぞれが特定のデータサイズとデータ型を処理する
> // マシンコードを持っています。
> //
> //
> // この関数を修正して、'size' パラメータを変更してください。
> //
> //     1)  コンパイル時に既知であることが保証される．
> //     2) T型配列（生成して返すシーケンス）のサイズを設定する．
> //
