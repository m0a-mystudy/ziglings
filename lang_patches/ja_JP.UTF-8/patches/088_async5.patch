2,3c2,3
< // Sure, we can solve our async value problem with a global
< // variable. But this hardly seems like an ideal solution.
---
> // 確かに、グローバル変数で非同期値の問題を解決することができます。
> // しかし、これは理想的な解決策とは言い難い。
5c5,7
< // So how do we REALLY get return values from async functions?
---
> // では、実際に非同期関数から戻り値を取得するにはどうすればよいのだろうか？
> //
> // 'await' キーワードは、非同期関数が完了するのを待ち、その戻り値を取得します。
7,8d8
< // The 'await' keyword waits for an async function to complete
< // and then captures its return value.
14,15c14,20
< //    var foo_frame = async foo(); // invoke and get frame
< //    var value = await foo_frame; // await result using frame
---
> //    var foo_frame = async foo(); // フレーム起動・取得
> //    var value = await foo_frame; // フレームを使って結果を待ちます。
> //
> // 上記の例は、foo()を呼び出して5を返すだけの愚かな方法です。
> // しかし、foo()がもっと面白いことをした場合、
> // 例えば5を得るためにネットワークの応答を待つとしたら、
> // 我々のコードは値の準備ができるまで一時停止します。
17,20c22,23
< // The above example is just a silly way to call foo() and get 5
< // back. But if foo() did something more interesting such as wait
< // for a network response to get that 5, our code would pause
< // until the value was ready.
---
> // ご覧のように、async/await は基本的に関数呼び出しを 2 つのパートに分割します。
> // 
22,23c25,26
< // As you can see, async/await basically splits a function call
< // into two parts:
---
> //    1. 関数を呼び出す ('async')
> //    2. 戻り値の取得（'await')
25,26c28,29
< //    1. Invoke the function ('async')
< //    2. Getting the return value ('await')
---
> // また、'suspend' キーワードは、async コンテキストで呼び出される関数に
> // 存在する必要はないことに注意してください。
28,29c31
< // Also notice that a 'suspend' keyword does NOT need to exist in
< // a function to be called in an async context.
---
> // 'await' を使用して、getPageTitle() が返す文字列を取得します。
31,32d32
< // Please use 'await' to get the string returned by
< // getPageTitle().
45c45
<     // Please PRETEND this is actually making a network request.
---
>     // これは実際にネットワークリクエストを行っていることを前提にしてください。
