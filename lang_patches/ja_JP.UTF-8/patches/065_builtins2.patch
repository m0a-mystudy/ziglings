2c2
< // Zig has builtins for mathematical operations such as...
---
> // Zigには、以下のような数学演算のための組み込み関数があります。
7c7
< // ...and lots of type casting operations such as...
---
> // ...そして、以下のような多くの型キャスト操作があります。
12,15c12,15
< // Spending part of a rainy day skimming through the complete
< // list of builtins in the official Zig documentation wouldn't be
< // a bad use of your time. There are some seriously cool features
< // in there. Check out @call, @compileLog, @embedFile, and @src!
---
> // 雨の日に、公式 Zig ドキュメントにある組み込み関数の完全なリストにざっと
> // 目を通すのも悪くない時間の使い方でしょう。
> // そこにあるのは、とてもクールな機能です。
> // call、@compileLog、@embedFile、@srcをチェックしてみてください。
19,20c19,20
< // For now, we're going to complete our examination of builtins
< // by exploring just THREE of Zig's MANY introspection abilities:
---
> // とりあえず、Zigの数あるイントロスペクション能力のうち、3つだけを調べて、
> // 組み込み件数の検証を完了します。
24,25c24,25
< // Returns the innermost struct, enum, or union that a function
< // call is inside.
---
> // 関数呼び出しの内部にある、最も内側の構造体、列挙体、
> // または共用体を返します。
29,31c29,31
< // Returns information about any type in a TypeInfo union which
< // will contain different information depending on which type
< // you're examining.
---
> // TypeInfoユニオンに含まれる任意の型に関する情報を返す。
> // これは、どの型を調べるかによって異なる情報を含む。
> //
35,38c35,38
< // Returns the type common to all input parameters (each of which
< // may be any expression). The type is resolved using the same
< // "peer type resolution" process the compiler itself uses when
< // inferring types.
---
> // すべての入力パラメータ（各パラメータは任意の式）に共通する型を返します。
> // この型は、コンパイラが型を推定する際に使用するのと同じ「ピア型解決」プロセスを
> // 使用して解決されます。
> //
40,41c40,41
< // (Notice how the two functions which return types start with
< // uppercase letters? This is a standard naming practice in Zig.)
---
> // (型を返す2つの関数が大文字で始まっていることに注目してください。
> // これはZigの標準的な命名方法です)。
43c43
< const print = import(std).debug.print; // Oops!
---
> const print = import(std).debug.print; // おっと！
58,59c58,59
<     // Oops! We cannot leave the 'me' and 'myself' fields
<     // undefined. Please set them here:
---
>     // おっと! me' と 'myself' フィールドを未定義のままにしておくことはできません。
>     // ここで設定してください。
63,64c63,64
<     // This determines a "peer type" from three separate
<     // references (they just happen to all be the same object).
---
>     // これは3つの別々の参照から「仲間の型」を決定します
>     //（これらは偶然にもすべて同じオブジェクトです）。
67,70c67,70
<     // Oh dear, we seem to have done something wrong when calling
<     // this function. It is namespaced to the struct, but doesn't
<     // use the method syntax (there's no self parameter). Please
<     // fix this call:
---
>     // この関数を呼び出すとき、何か間違ったことをしたようです。
>     // この関数は構造体の名前空間になっていますが、メソッドの構文を使用していません
>     // （self パラメータがありません）
>     // この呼び出しを修正してください。
75,86c75,86
<     //   His final words as he was looking in
<     //   those waters he habitually watched
<     //   were these:
<     //       "Alas, my beloved boy, in vain!"
<     //   The place gave every word back in reply.
<     //   He cried:
<     //            "Farewell."
<     //   And Echo called:
<     //                   "Farewell!"
<     //
<     //     --Ovid, The Metamorphoses
<     //       translated by Ian Johnston
---
>     //   彼の最後の言葉は、いつも見ていたあの海を
>     //   いつも見ていた水辺で
>     //   こう言った
>     //       「悲しいかな、私の愛する少年よ、無駄だった！」
>     //   その場所は、あらゆる言葉を返してきた。
>     //   彼は泣いた
>     //            "さらばだ"
>     //   そしてエコーは..:
>     //                   "さらばだ！"
>     
>     //     --オービッド『変身』より
>     //       イアン・ジョンストン訳
93c93
<     // 'fields' is a slice of StructFields. Here's the declaration:
---
>     // 'fields' は StructFields のスライスです。以下はその宣言である。
103,105c103,105
<     // Please complete these 'if' statements so that the field
<     // name will not be printed if the field is of type 'void'
<     // (which is a zero-bit type that takes up no space at all!):
---
>     // フィールドの型が 'void' (これはスペースを全く取らないゼロビット型です!) 
>     // の場合、フィールド名が表示されないように、
>     // これらの 'if' ステートメントを完成させてください。
118,119c118,119
<     // Yuck, look at all that repeated code above! I don't know
<     // about you, but it makes me itchy.
---
>     // うっそー、上の繰り返されたコードを見てよ! 
>     // これは痒くなりますね。
121,124c121,124
<     // Alas, we can't use a regular 'for' loop here because
<     // 'fields' can only be evaluated at compile time.  It seems
<     // like we're overdue to learn about this "comptime" stuff,
<     // doesn't it? :-)
---
>     // fields' はコンパイル時にしか評価できないので、
>     // ここでは通常の 'for' ループは使えません。
>     // この「コンパイル時」というものを学ぶのは、
>     // もう遅いような気がしますよね :-)
