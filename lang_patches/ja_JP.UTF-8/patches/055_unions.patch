2,5c2,5
< // A union lets you store different types and sizes of data at
< // the same memory address. How is this possible? The compiler
< // sets aside enough memory for the largest thing you might want
< // to store.
---
> // ユニオンを使うと、異なるタイプやサイズのデータを同じメモリアドレスに
> // 格納することができます。これはどのようにして可能なのでしょうか？
> // コンパイラは、格納したい最大のもののために十分なメモリを確保しています。
> // 
7,8c7,8
< // In this example, an instance of Foo always takes up u64 of
< // space in memory even if you're currently storing a u8.
---
> // この例では、Foo のインスタンスは、現在 u8 を格納していても、
> // 常に u64 のメモリ空間を占有します。
16,19c16,19
< // The syntax looks just like a struct, but a Foo can only hold a
< // small OR a medium OR a large value. Once a field becomes
< // active, the other inactive fields cannot be accessed. To
< // change active fields, assign a whole new instance:
---
> // 構文は構造体と同じように見えますが、
> // Fooはsmall、medium、large 値のいずれかしか保持できません。
> // あるフィールドがアクティブになると、他の非アクティブなフィールドはアクセスできなくなります。
> // アクティブなフィールドを変更するには、まったく新しいインスタンスを割り当てます。
26,29c26,29
< // Unions can save space in memory because they let you "re-use"
< // a space in memory. They also provide a sort of primitive
< // polymorphism. Here fooBar() can take a Foo no matter what size
< // of unsigned integer it holds:
---
> // ユニオンはメモリ内の空間を「再利用」できるため、メモリ内の空間を節約することができます。
> // また、一種のプリミティブなポリモーフィズムを提供します。
> // ここでは、fooBar() は、それがどんなサイズの符号なし整数であっても 
> // Foo を受け取ることができます。
33,35c33,35
< // Oh, but how does fooBar() know which field is active? Zig has
< // a neat way of keeping track, but for now, we'll just have to
< // do it manually.
---
> // しかし、fooBar()はどのフィールドがアクティブであるかをどうやって知るのでしょうか？
> // Zig にはきちんとした追跡方法がありますが、
> // 今のところは手動でやるしかないでしょう。
37c37
< // Let's see if we can get this program working!
---
> // このプログラムが動くかどうか見てみましょう!
41,44c41,44
< // We've just started writing a simple ecosystem simulation.
< // Insects will be represented by either bees or ants. Bees store
< // the number of flowers they've visited that day and ants just
< // store whether or not they're still alive.
---
> // 簡単な生態系シミュレーションを書き始めたところです。
> // 昆虫はハチかアリで表現します。蜂は
> // その日に訪れた花の数を記憶し、アリは単に
> // 生きているかどうかを記憶します。
50,51c50,51
< // Since we need to specify the type of insect, we'll use an
< // enum (remember those?).
---
> // 昆虫の種類を指定する必要があるので 
> // enum を使用します（覚えていますか？）
55c55
<     // We'll just make one bee and one ant to test them out:
---
>         // 試しに蜂と蟻を1匹ずつ作ってみます。
61c61
<     // Oops! We've made a mistake here.
---
>     // おっと! ここで間違いがありました。
68,70c68,70
< // Eccentric Doctor Zoraptera says that we can only use one
< // function to print our insects. Doctor Z is small and sometimes
< // inscrutable but we do not question her.
---
> // エキセントリックなドクター・ゾラプテラが、
> // 昆虫の印刷には1つの関数しか使えないと言う。ドクターZは小柄で、
> // 時々不可解なことを言うが、我々は彼女を問いただすことはしない。
