2c2
< // Remember using if/else statements as expressions like this?
---
> // if/else文をこのような式として使用したことを覚えていますか？
6c6
< // Zig also lets you use for and while loops as expressions.
---
> // Zig では、for や while ループも式として使用できます。
8,9c8,9
< // Like 'return' for functions, you can return a value from a
< // loop block with break:
---
> // 関数の 'return' のように、
> // break を使ってループブロックから値を返すことができる。
11c11
< //     break true; // return boolean value from block
---
> //     break true; // ブロックからブール値を返す
13,17c13,17
< // But what value is returned from a loop if a break statement is
< // never reached? We need a default expression. Thankfully, Zig
< // loops also have 'else' clauses! As you might have guessed, the
< // 'else' clause is evaluated when: 1) a 'while' condition becomes
< // false or 2) a 'for' loop runs out of items.
---
> // しかし、break 文に到達しない場合、ループからどのような値が返されるのでしょうか？
> // デフォルトの式が必要だ。
> // ありがたいことに、Zigループには「else」句があります。ご想像の通り、
> // 'else'節は次のような場合に評価されます。1) 'while' 条件が偽になったとき、
> // 2) 'for' ループがアイテムを使い果たしたとき。
22,25c22,25
< // If you do not provide an else clause, an empty one will be
< // provided for you, which will evaluate to the void type, which
< // is probably not what you want. So consider the else clause
< // essential when using loops as expressions.
---
> // else 節を指定しないと、空の else 節が指定され、
> // それは void 型に評価されますが、それはおそらくあなたが望むものではありません。
> // そのため、ループを式として使用する際にはelse節は必須であると考えましょう。
> //
29c29
< //     };               // <-- ERROR! Implicit 'else void' here!
---
> //     };               // <-- エラー! ここに暗黙の'else void'がある!
31,32c31,32
< // With that in mind, see if you can fix the problem with this
< // program.
---
> // このことを踏まえて、このプログラムで問題を解決できるかどうか
> // 見てみましょう。
46,47c46,47
<     // Let's find the first language with a three-letter name and
<     // return it from the for loop.
---
>     // 3文字の名前を持つ最初の言語を見つけて 
>     // それをforループから返します。
