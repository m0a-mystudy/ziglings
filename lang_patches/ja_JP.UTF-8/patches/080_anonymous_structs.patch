2c2
< // Struct types are always "anonymous" until we give them a name:
---
> // 構造体型は、名前を付けるまでは常に「anonymous(匿名)」です。
6c6
< // So far, we've been giving struct types a name like so:
---
> // これまでは、次のように構造体型に名前を付けていました。
10c10,12
< // * The value of @typeName(Foo) is "<filename>.Foo".
---
> // * @typeName(Foo) の値は "<filename>.Foo"です。
> //
> // 構造体は、関数から返すときにも名前が与えられます。
12,13d13
< // A struct is also given a name when you return it from a
< // function:
19,20c19,20
< //     const MyBar = Bar();  // store the struct type
< //     const bar = Bar() {}; // create instance of the struct
---
> //     const MyBar = Bar();  // 構造体型を格納する。
> //     const bar = Bar() {}; // 構造体のインスタンスを作成する。
22,24c22,24
< // * The value of @typeName(Bar()) is "Bar()".
< // * The value of @typeName(MyBar) is "Bar()".
< // * The value of @typeName(@TypeOf(bar)) is "Bar()".
---
> // * @typeName(Bar())の値は "Bar() "である。
> // * @typeName(MyBar)の値は "Bar() "である。
> // * @typeName(@TypeOf(bar))の値は "Bar() "である。
26,27c26,27
< // You can also have completely anonymous structs. The value
< // of @typeName(struct {}) is "struct:<position in source>".
---
> // 完全に無名の構造体を持つこともできます。typeName(struct {})の値は
> // 「struct:<position in source>」です。
31,33c31,33
< // This function creates a generic data structure by returning an
< // anonymous struct type (which will no longer be anonymous AFTER
< // it's returned from the function).
---
> // この関数は、匿名構造体型
> // （この関数から返された後は匿名ではなくなります）を返して、
> // 汎用データ構造を作成します。
44,46c44,46
<     // See if you can complete these two variable initialization
<     // expressions to create instances of circle struct types
<     // which can hold these values:
---
>     // これらの値を保持することができる円構造体型のインスタンスを作成するために、
>     // これら2つの変数の初期化式を完成させることができるかどうかを確認します。
>     //
48,49c48,49
<     // * circle1 should hold i32 integers
<     // * circle2 should hold f32 floats
---
>     // * circle1 は i32 個の整数を保持する必要があります。
>     // * circle2 は f32 浮動小数点数を保持します。
78,81c78,81
< // Perhaps you remember the "narcissistic fix" for the type name
< // in Ex. 065? We're going to do the same thing here: use a hard-
< // coded slice to return the type name. That's just so our output
< // look prettier. Indulge your vanity. Programmers are beautiful.
---
> // Ex.065の型名の「ナルシスト的(narcissistic)修正」を覚えていますか？
> // ここで同じことをします。ハードコードされたスライスを使用して型名を返します。
> // これは出力がより美しく見えるようにするためです。自分の虚栄心を満足させてください。
> // プログラマは美しいのです。
85c85
< // The above would be an instant red flag in a "real" program.
---
> // 上記コードは、「本物」のプログラムでは即赤信号ものです。
