2c2
< // Zig has some fun array operators.
---
> // Zig には楽しい配列演算子があります。
4c4
< // You can use '++' to concatenate two arrays:
---
> // '++'を使って2つの配列を連結することができます。
8c8
< //   const c = a ++ b ++ [_]u8{ 5 }; // equals 1 2 3 4 5
---
> //   const c = a ++ b ++ [_]u8{ 5 }; // 1 2 3 4 5 になる
10c10
< // You can use '**' to repeat an array:
---
> // 配列の繰り返しに '**' を使用することができます。
12c12
< //   const d = [_]u8{ 1,2,3 } ** 2; // equals 1 2 3 1 2 3
---
> //   const d = [_]u8{ 1,2,3 } ** 2; // 1 2 3 1 2 3 になる
14,17c14,17
< // Note that both '++' and '**' only operate on arrays while your
< // program is _being compiled_. This special time is known in Zig
< // parlance as "comptime" and we'll learn plenty more about that
< // later.
---
> // 注意点
> // '++' と '**' 両方とも、プログラムが「コンパイル時」だけ、 配列を操作できる点に注意してください。
> // この特別な時間をZigでは「comptime」と呼びます。
> // 後ほど詳しく説明します。
25,27c25,27
<     // (Problem 1)
<     // Please set this array concatenating the two arrays above.
<     // It should result in: 1 3 3 7
---
>     // (問題 1)
>     // 上の2つの配列を連結したものをセットしてください．
>     // 想定する結果:  1 3 3 7
30,32c30,32
<     // (Problem 2)
<     // Please set this array using repetition.
<     // It should result in: 1 0 0 1 1 0 0 1 1 0 0 1
---
>     // (問題 2)
>     // この配列を繰り返しを使ってセットしてください．
>     // 想定する結果: 1 0 0 1 1 0 0 1 1 0 0 1
35c35
<     // Okay, that's all of the problems. Let's see the results.
---
>     // さて、これで問題は全部です。結果を見てみましょう。
37,38c37,38
<     // We could print these arrays with leet[0], leet[1],...but let's
<     // have a little preview of Zig 'for' loops instead:
---
>     // これらの配列をleet[0], leet[1],...と表示することができます。
>     // 代わりにZig 'for'ループのプレビューを少し見てみましょう。
40c40
<     //    for (<item array>) |item| { <do something with item> }
---
>     //    for (<itemを保持する配列>) |item| { <itemに対する何らかの処理> }
42,43c42,43
<     // Don't worry, we'll cover looping properly in upcoming
<     // lessons.
---
>     // ご心配なく。ループ処理については、次回以降に説明します。
>     // 
