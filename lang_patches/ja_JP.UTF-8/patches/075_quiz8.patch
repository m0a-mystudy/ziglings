2c2
< // Quiz Time!
---
> // クイズタイム
4c4,7
< // Let's revisit the Hermit's Map from Quiz 7.
---
> // クイズ7の「仙人の地図」を再確認してみよう。
> //
> // 説明文がなければ、これほど大きくはならない。
> // それに、変えるのは一箇所だけだ。
6,8d8
< // Oh, don't worry, it's not nearly as big without all the
< // explanatory comments. And we're only going to change one part
< // of it.
26,28c26,28
< // Remember how we didn't have to declare the numeric type of the
< // place_count because it is only used at compile time? That
< // probably makes a lot more sense now. :-)
---
> // Place_count の数値型はコンパイル時にのみ使用されるため、
> // 宣言する必要がなかったことを思い出してください。
> // 今ならもっと分かりやすいかもしれませんね :-)
37,38c37,38
< // Okay, so as you may recall, we had to create each Path struct
< // by hand and each one took 5 lines of code to define:
---
> // 思い起こせば、各Path構造体を手作業で作成し、
> // それぞれを定義するために5行のコードを必要としました。
46,48c46,47
< // Well, armed with the knowledge that we can run code at compile
< // time, we can perhaps shorten this a bit with a simple function
< // instead.
---
> // コンパイル時にコードを実行できるという知識で武装すれば、
> // 代わりに簡単な関数でこれを少し短くできるかもしれません。
50c49
< // Please fill in the body of this function!
---
> // この関数の本体を埋めてください!
55,56c54,55
< // Using our new function, these path definitions take up considerably less
< // space in our program now!
---
> // 新しい関数を使用することで、これらのパス定義がプログラムに占める割合はかなり少なくなります。
> // プログラム内のスペースが大幅に削減されました!
64c63,66
< // But is it more readable? That could be argued either way.
---
> // しかし、その方が読みやすいのだろうか？それはどちらとも言える。
> //
> // コンパイル時に文字列をパースすることが可能であることを見てきましたので、
> // これでどれだけ凝ったことができるかは、まさに無限の可能性を秘めています。
66,68d67
< // We've seen that it is possible to parse strings at compile
< // time, so the sky's really the limit on how fancy we could get
< // with this.
70,71c69,70
< // For example, we could create our own "path language" and
< // create Paths from that. Something like this, perhaps:
---
> // 例えば、私たちは独自の「パス言語」を作成することができます。
> // そこからパスを作成することができます。おそらくこのようなものです。
78c77
< // Feel free to implement something like that as a SUPER BONUS EXERCISE!
---
> // スーパーボーナス課題として、このようなものを自由に実装してみよう!
157c156
<     // We could either have this:
---
>     // このどちらかにすることができます。
166c165
<     // or this comptime wizardry:
---
>     // あるいは、この comptime ワザを使う。
