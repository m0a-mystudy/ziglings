2,4c2,4
< // As with integers, you can pass a pointer to a struct when you
< // will wish to modify that struct. Pointers are also useful when
< // you need to store a reference to a struct (a "link" to it).
---
> // 整数の場合と同様に、構造体へのポインタを渡すと、その構造体を変更することができます。
> // 構造体を変更したい場合、その構造体へのポインタを渡すことができます。ポインタは次のような場合にも便利です。
> // 構造体への参照（構造体への「リンク」）を格納する必要がある場合。
10c10
< //     var pv: *Vertex = &v1;   // <-- a pointer to our struct
---
> //     var pv: *Vertex = &v1;   // <-- 構造体へのポインタ
12,13c12,13
< // Note that you don't need to dereference the "pv" pointer to access
< // the struct's fields:
---
> // 構造体のフィールドにアクセスするために "pv" ポインタをデリファレンスする
> // 必要はないことに注意してください。
15,16c15,16
< //     YES: pv.x
< //     NO:  pv.*.x
---
> //     こっちでOK: pv.x
> //     だめです:   pv.*.x
18,19c18,19
< // We can write functions that take pointers to structs as
< // arguments. This foo() function modifies struct v:
---
> // 構造体へのポインタを引数に取る関数を書くことができます。
> // この foo() 関数は構造体 v を変更します。
27c27
< // And call them like so:
---
> // このように呼び出します。
31,33c31,33
< // Let's revisit our RPG example and make a printCharacter() function
< // that takes a Character by reference and prints it...*and*
< // prints a linked "mentor" Character, if there is one.
---
> // RPG の例を見直して、printCharacter() 関数を作ってみましょう。
> // この関数は参照によってキャラクタを受け取り、それを表示します。
> // リンクされた師匠(menter) キャラクタがあれば、それを表示します。
47c47
<     health: u8 = 100, // You can provide default values
---
>     health: u8 = 100, // デフォルト値を提供することができます
50,51c50,51
<     // I need to use the '?' here to allow for a null value. But
<     // I don't explain it until later. Please don't tell anyone.
---
>     // ここで'?'を使って、NULL値を許容する必要があるんだ。
>     // でも、その説明は後ほど。内緒でお願いします。
66c66
<         .mentor = &mighty_krodor, // Glorp's mentor is the Mighty Krodor
---
>         .mentor = &mighty_krodor, // Glorpの師匠は Mighty Krodor
69,70c69,70
<     // FIX ME!
<     // Please pass Glorp to printCharacter():
---
>     // 直して!
>     // printCharacter()にGlorpを渡してください。
74c74
< // Note how this function's "c" parameter is a pointer to a Character struct.
---
> // この関数の "c "パラメータがCharacter構造体へのポインタであることに注意してください。
76,78c76,78
<     // Here's something you haven't seen before: when switching an enum, you
<     // don't have to write the full enum name. Zig understands that ".wizard"
<     // means "Class.wizard" when we switch on a Class enum value:
---
>     // ここで、今まで見たことのないものを紹介します。enumを切り替えるとき、
>     // 完全なenum名を書く必要はないのです。Zigは、Classのenum値をスイッチするとき、
>     // 「.wizard」は「Class.wizard」を意味すると理解してくれます。
93,94c93,94
<     // Checking an "optional" value and capturing it will be
<     // explained later (this pairs with the '?' mentioned above.)
---
>     // 「optional」の値をチェックし、それをキャプチャします。
>     // 詳細はは後で説明します(これは前述の'?'と対になります)。
