2,26c2,5
< // "Compile time" is a program's environment while it is being
< // compiled. In contrast, "run time" is the environment while the
< // compiled program is executing (traditionally as machine code
< // on a hardware CPU).
< //
< // Errors make an easy example:
< //
< // 1. Compile-time error: caught by the compiler, usually
< //    resulting in a message to the programmer.
< //
< // 2. Runtime error: either caught by the running program itself
< //    or by the host hardware or operating system. Could be
< //    gracefully caught and handled or could cause the computer
< //    to crash (or halt and catch fire)!
< //
< // All compiled languages must perform a certain amount of logic
< // at compile time in order to analyze the code, maintain a table
< // of symbols (such as variable and function names), etc.
< //
< // Optimizing compilers can also figure out how much of a program
< // can be pre-computed or "inlined" at compile time to make the
< // resulting program more efficient. Smart compilers can even
< // "unroll" loops, turning their logic into a fast linear
< // sequence of statements (at the usually very slight expense of
< // the increased size of the repeated code).
---
> // 「コンパイル時」とは、プログラムがコンパイルされている間の環境のこと。
> // これに対して「ランタイム」とは、コンパイルされたプログラムが実行されている
> // 間の環境（従来はハードウェアCPU上のマシンコードとして）
> // 
28,29c7,29
< // Zig takes these concepts further by making these optimizations
< // an integral part of the language itself!
---
> // エラーがわかりやすい例です。
> //
> // 1. コンパイル時のエラー：コンパイラによって検出され、
> //      通常はプログラマにメッセージが表示される。
> //
> // 2. ランタイムエラー：実行中のプログラム自身、またはホストハードウェアやオペレーティングシステム
> //      によって捕捉される。優雅にキャッチして処理されることもあれば、
> //      コンピュータをクラッシュさせる（あるいは停止させて火災を発生させる）
> //      こともありうる！
> //
> // すべてのコンパイル言語は、コードを解析し、シンボル（変数名や関数名など）のテーブルを維持するために、
> // コンパイル時に一定のロジックを実行する必要がある。
> //
> //
> // 最適化コンパイラは、コンパイル時にプログラムのどの程度を事前計算または
> // 「インライン化」して、結果として得られるプログラムをより
> // 効率的にすることができるかを把握することもできます。
> // 賢いコンパイラはループを「アンロール」して、そのロジックを高速な線形命令列に変換することもできる
> // （通常、繰り返されるコードのサイズが大きくなるという犠牲はごくわずかである）。
> //
> //
> // Zigはこれらの概念をさらに推し進め、
> // これらの最適化を言語自体の不可欠な部分としています。
34,45c34,45
<     // ALL numeric literals in Zig are of type comptime_int or
<     // comptime_float. They are of arbitrary size (as big or
<     // little as you need).
<     //
<     // Notice how we don't have to specify a size like "u8",
<     // "i32", or "f64" when we assign identifiers immutably with
<     // "const".
<     //
<     // When we use these identifiers in our program, the VALUES
<     // are inserted at compile time into the executable code. The
<     // IDENTIFIERS "const_int" and "const_float" don't exist in
<     // our compiled application!
---
>     // Zig の全ての数値リテラルは comptime_int 型または comptime_float 型です。
>     // これらは任意の大きさです（必要なだけ大きくても小さくても構いません）。
>     // 
>     //
>     // const" で識別子を固定的に割り当てる場合、"u8"、"i32"、"f64" 
>     // のようなサイズを指定する必要がないことに注意してください。
>     //
>     //
>     // これらの識別子をプログラム中で使用すると、
>     // コンパイル時に実行コードに値が挿入される。 
>     // "const_int" と "const_float" は、
>     // コンパイルされたアプリケーションには存在しない!
51,52c51,56
<     // But something changes when we assign the exact same values
<     // to identifiers mutably with "var".
---
>     // しかし、"var "を使って全く同じ値をミュータブルに識別子に代入すると、
>     // 何かが変わる。
>     //
>     // リテラルは comptime_int と comptime_float のままですが、
>     // 実行時に変更可能な識別子に代入したいのです。
>     //
54,63c58,63
<     // The literals are STILL comptime_int and comptime_float,
<     // but we wish to assign them to identifiers which are
<     // mutable at runtime.
<     //
<     // To be mutable at runtime, these identifiers must refer to
<     // areas of memory. In order to refer to areas of memory, Zig
<     // must know exactly how much memory to reserve for these
<     // values. Therefore, it follows that we just specify numeric
<     // types with specific sizes. The comptime numbers will be
<     // coerced (if they'll fit!) into your chosen runtime types.
---
>     // 実行時に変更可能であるためには、これらの識別子はメモリの領域を参照する必要があります。
>     // メモリ領域を参照するために、Zig はこれらの値のために確保すべきメモリの量を
>     // 正確に知っていなければなりません。
>     // したがって、特定のサイズを持つ数値型を指定すればよいことになる。
>     // comptimeの数値は、選択したランタイム型に強制的に入れられます
>     // （もし入れられるなら！）。
67,68c67,68
<     // We can change what is stored at the areas set aside for
<     // "var_int" and "var_float" in the running compiled program.
---
>     // 実行中のコンパイルプログラムで、"var_int" と "var_float" に
>     // 割り当てられた領域に格納されているものを変更することができます。
74,76c74,76
<     // Bonus: Now that we're familiar with Zig's builtins, we can
<     // also inspect the types to see what they are, no guessing
<     // needed!
---
>     // ボーナス：Zig の組み込み関数に慣れたので、次のことができるようになりました。
>     // 型が何であるかを調べることができます。
>     // 推測は不要です!
