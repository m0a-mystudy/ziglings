2,3c2,3
< // As a matter of fact, you can put 'comptime' in front of any
< // expression to force it to be run at compile time.
---
> // 実のところ、任意の式の前に 'comptime' を置くことで、コ
> // ンパイル時に強制的に実行させることができます。
5c5
< // Execute a function:
---
> // 関数を実行する:
9c9
< // Get a value:
---
> // 値を取得:
13c13
< // Execute a whole block:
---
> // ブロック全体を実行:
20c20
< // Get a value from a block:
---
> // ブロックから値を取得:
33,34c33,34
<     // We meant to fetch the last llama. Please fix this simple
<     // mistake so the assertion no longer fails.
---
>     // 最後のllamaを取得するつもりでした。アサーションが失敗しないように、
>     // この単純なミスを修正してください。
41,43c41,42
<     // We've put a guard assert() at the top of this function to
<     // prevent mistakes. The 'comptime' keyword here means that
<     // the mistake will be caught when we compile!
---
>     // この関数の先頭には、間違いを防ぐためにガードのassert()を入れています。
>     // ここでの'comptime'キーワードは、コンパイル時にミスを検出することを意味します!
45,47d43
<     // Without 'comptime', this would still work, but the
<     // assertion would fail at runtime with a PANIC, and that's
<     // not as nice.
49,52c45,52
<     // Unfortunately, we're going to get an error right now
<     // because the 'i' parameter needs to be guaranteed to be
<     // known at compile time. What can you do with the 'i'
<     // parameter above to make this so?
---
>     // 'comptime' がなければ、これはまだ動作するが、
>     // アサーションは実行時にPANICで失敗し、それはあまり良いことではない。
>     // 
>     //
>     // 残念ながら、今エラーが発生しそうだ。
>     // なぜなら 'i' パラメータはコンパイル時に既知であることが
>     // 保証されている必要があるからだ。
>     // これを実現するために、上の'i'パラメータで何ができるでしょうか？    
58,59c58,59
< // Fun fact: this assert() function is identical to
< // std.debug.assert() from the Zig Standard Library.
---
> // 面白いことに、この assert() 関数は、Zig 標準ライブラリの 
> // std.debug.assert() と同じものです。
64,65c64,66
< // Bonus fun fact: I accidentally replaced all instances of 'foo'
< // with 'llama' in this exercise and I have no regrets!
---
> // おまけ: この演習では、誤って 'foo' のインスタンスをすべて 'llama' に
> // 置き換えてしまいましたが、後悔はしていません!
> 
